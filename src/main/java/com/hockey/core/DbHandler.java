package com.hockey.core;

import org.apache.log4j.Logger;
import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.net.HttpURLConnection;
import java.net.MalformedURLException;
import java.net.URL;
import java.util.HashSet;
import java.util.Set;

import org.json.*;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;
import org.springframework.stereotype.Service;

@Component
public class DbHandler {
	static Logger logger = Logger.getLogger(DbHandler.class);
	
	@Autowired // This means to get the bean called conferenceRepository
    // Which is auto-generated by Spring, we will use it to handle the data
    public ConferenceRepository conferenceRepository;
	
	public void loadAllDb() {
	
		logger.debug("loadAllDb has been reached");
		
		try {

		     URL url = new URL("https://statsapi.web.nhl.com/api/v1/teams");
		     HttpURLConnection conn = (HttpURLConnection) url.openConnection();
		     conn.setRequestMethod("GET");
		     conn.setRequestProperty("Accept", "application/json");

		     if (conn.getResponseCode() != 200) {
		         throw new RuntimeException("Failed : HTTP error code : "
		                 + conn.getResponseCode());
		     }

		     BufferedReader br = new BufferedReader(new InputStreamReader(
		         (conn.getInputStream())));

		     String myString;
		     int count = 0;
		     String dataLine = "";
		    
		     System.out.println("Output from Server .... \n");
		     while ((myString = br.readLine()) != null) {
                 count = count + 1;
                 dataLine = dataLine + myString;  
		    	 
		    	 System.out.println(count + "   " + myString);
    	     }
		     
		     JSONObject myJsonString = new JSONObject(dataLine);
			 Set<Integer> conferenceIds = new HashSet<Integer>();

			 JSONArray teamsArray = myJsonString.getJSONArray("teams");
			 for (int i = 0; i < teamsArray.length(); i++)
			 {
				if (!conferenceIds.contains(teamsArray.getJSONObject(i).getJSONObject("conference").getInt("id"))){
					conferenceIds.add(teamsArray.getJSONObject(i).getJSONObject("conference").getInt("id"));
					Conference nConf = new Conference();	 
					nConf.setConfId(teamsArray.getJSONObject(i).getJSONObject("conference").getInt("id"));
				    nConf.setName(teamsArray.getJSONObject(i).getJSONObject("conference").getString("name"));
				    System.out.println("CONF ID " + nConf.getConfId()); 
				    System.out.println("CONF Name " + nConf.getName());
				    System.out.println("CONF " + nConf);
				    conferenceRepository.save(nConf);
				 }
		     }

			 System.out.println(conferenceIds);  
		     conn.disconnect();

		     } catch (IOException e) {

		        e.printStackTrace();
			        
  	      }


	    }
		
	
}
